diff --git a/FH.py b/FH.py
index 7492109..b9d70a8 100644
--- a/FH.py
+++ b/FH.py
@@ -10,10 +10,9 @@ import mpld3
 from mpld3 import plugins
 from SLCT import *
 
-from flask import Flask, request, make_response, render_template
-from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
-from matplotlib.figure import Figure
 import json
+from general_route_functions import generate_figure
+from flory import q
 
 """ Flory Huggins"""
 def fun(x,na,nb,phi1):
@@ -129,3 +128,109 @@ def NR(na,nb,nav,crit_chi,flipper):
 
 
 		return (phi,y2)
+
+def fPlot(polya,polyb,na,nb,v0,jsondata):
+	chi = float(request.form['chivalue'])
+	chi = chi/v0
+	type = jsondata['0']['type']
+
+	fig = generate_figure(na,nb,chi)
+
+	"""Add d3 stuff"""
+	plugins.connect(fig, plugins.MousePosition())
+
+	#Make the plot html/javascript friendly
+	id = "fig01"
+	json01 = json.dumps(mpld3.fig_to_dict(fig))
+
+	list_of_plots = list()
+	#Make a dictionary of plots
+	plot_dict = dict()
+	plot_dict['id'] = "fig01"
+	plot_dict['json'] = json01
+	list_of_plots.append(plot_dict)
+
+
+	"""Spinodal"""
+	crit_chi = .5*((1/(na**.5) + 1/(nb**.5))**2)
+	if na == nb:
+		crit_phi = 0.5
+	else:
+		crit_phi = (-nb + sqrt(na*nb) )/(na-nb)
+	nav = 2./crit_chi
+	nav = 1.0
+	global flipper
+
+	"""Flipper"""
+	if na > nb:
+			flipper = 1
+			na, nb, w,x,y,z=  flip(na,nb,1,1,1,1)
+	else:
+			flipper = 0
+	"""Set up the plot"""
+	fig = plt.figure()
+	fig.set_facecolor('white')
+	axis = fig.add_subplot(1, 1, 1,axisbg='#f5f5f5')
+	axis.set_xlabel('Volume Fraction, \u03a6')
+	axis.set_ylabel('Temperature, K')
+	axis.set_title('Flory-Huggins Phase Diagram')
+
+	"""Run Optimization"""
+	x = np.arange(0.05,0.95,0.001)
+	spinodal = nav*(.5*(1./(na*x) + 1./(nb-nb*x)))
+	#spinodal = spinodal/nav
+
+	if flipper == 1:
+		x = 1 - x
+
+
+	phi,y2 =  NR(na,nb,nav,crit_chi,flipper)
+	#The line above and below do the same thing, one will replace the other soon.
+	job = q.enqueue_call(
+		func=NR, args=(na,nb,nav,crit_chi,flipper), result_ttl=5000)
+
+	print job.get_id()
+
+	#Convert list to np array
+	y2 = np.asarray(y2)
+	spinodal= np.asarray(spinodal)
+
+	#Flip the plot w/ chi to be a function of temperature
+	temp_unit = jsondata['0']['temperature_unit']
+
+	if type == "Type 1":
+		chi = float(jsondata['0']['chi'])
+
+	
+		y2 = (chi/v0)/y2
+		spinodal = (chi/v0)/spinodal
+		crit_chi = (chi/v0)/crit_chi
+
+	elif type == "Type 2":
+		y2 = float(jsondata['0']['chib']) / ( y2 - float(jsondata['0']['chia']))
+		spinodal = float(jsondata['0']['chib']) / (spinodal - float(jsondata['0']['chia']))
+		crit_chi= float(jsondata['0']['chib']) / (crit_chi- float(jsondata['0']['chia']))
+
+	spinline = axis.plot(x,spinodal,'r',lw=2,label="Spinodal") 
+	binline = axis.plot(phi,y2,'b',lw=2,label="Binodal")
+	axis.legend()
+
+	"""Add d3 stuff"""
+	plugins.connect(fig, plugins.MousePosition())
+
+	id2 = "fig02"
+	json02 = json.dumps(mpld3.fig_to_dict(fig))
+
+	#Attempt to make dictionary of plots
+	plot_dict= dict()
+	plot_dict['id'] = "fig02"
+	plot_dict['json'] = json02
+	list_of_plots.append(plot_dict)
+
+	#Generate table
+	zipped = zip(x,spinodal,y2)
+
+	#Critical point
+	critvals = [crit_phi,crit_chi]
+
+	return jsondata,critvals,list_of_plots,zipped
diff --git a/FH.pyc b/FH.pyc
index bcd80f8..2ba8952 100644
Binary files a/FH.pyc and b/FH.pyc differ
diff --git a/flory.py b/flory.py
index a50ec95..3473ada 100755
--- a/flory.py
+++ b/flory.py
@@ -1,13 +1,14 @@
 #!/usr/bin/env python
 # -*- coding: utf-8 -*-
 
+#Flask
+from flask import Flask, request, render_template
 
 #Numpy imports
 from numpy.linalg import inv
 from numpy import arange,asarray,zeros
 
-
-#These can't be put __init__ for some reason
+#Modules
 import SLCT
 import VO
 from FH import *
@@ -49,10 +50,6 @@ app.config['SECRET_KEY'] = 'use a better key'
 RQDashboard(app,'/rq')
 toolbar = DebugToolbarExtension(app)
 
-
-
-
-
 @app.route('/')
 @app.route('/index')
 def index():
@@ -154,7 +151,6 @@ def slctplot():
 		polyb = request.form['polyb']
 		print polya,polyb
 
-
 		critphi, list_of_plots, zipped =SLCT.sPlot(polya,
 					polyb,na,nb)
 
@@ -187,117 +183,10 @@ def plot():
 		response = urllib.urlopen(site_url)
 		jsondata = json.load(response)
 
-
 		if request.form['florybutton'] == 'Generate Profile!':
 			chi = float(request.form['chivalue'])
-			chi = chi/v0
-			type = jsondata['0']['type']
-
-			fig = generate_figure(na,nb,chi)
-
-			"""Add d3 stuff"""
-			canvas = FigureCanvas(fig)
-			output = StringIO.StringIO()
-			canvas.print_png(output, bbox_inches='tight')
-			plugins.connect(fig, plugins.MousePosition())
-
-			#Make the plot html/javascript friendly
-			id = "fig01"
-			json01 = json.dumps(mpld3.fig_to_dict(fig))
-
-			list_of_plots = list()
-			#Make a dictionary of plots
-			plot_dict = dict()
-			plot_dict['id'] = "fig01"
-			plot_dict['json'] = json01
-			list_of_plots.append(plot_dict)
-
-
-			"""Spinodal"""
-			crit_chi = .5*((1/(na**.5) + 1/(nb**.5))**2)
-			if na == nb:
-				crit_phi = 0.5
-			else:
-				crit_phi = (-nb + sqrt(na*nb) )/(na-nb)
-			nav = 2./crit_chi
-			nav = 1.0
-			global flipper
-
-			"""Flipper"""
-			if na > nb:
-					flipper = 1
-					na, nb, w,x,y,z=  flip(na,nb,1,1,1,1)
-			else:
-					flipper = 0
-			"""Set up the plot"""
-			fig = Figure()
-			fig.set_facecolor('white')
-			axis = fig.add_subplot(1, 1, 1,axisbg='#f5f5f5')
-			axis.set_xlabel('Volume Fraction, \u03a6')
-			axis.set_ylabel('Temperature, K')
-			axis.set_title('Flory-Huggins Phase Diagram')
-
-			"""Run Optimization"""
-			x = arange(0.05,0.95,0.001)
-			spinodal = nav*(.5*(1./(na*x) + 1./(nb-nb*x)))
-			#spinodal = spinodal/nav
-
-			if flipper == 1:
-				x = 1 - x
-
-
-			phi,y2 =  NR(na,nb,nav,crit_chi,flipper)
-			#The line above and below do the same thing, one will replace the other soon.
-			job = q.enqueue_call(
-				func=NR, args=(na,nb,nav,crit_chi,flipper), result_ttl=5000)
-
-			print job.get_id()
-
-			#Convert list to np array
-			y2 = np.asarray(y2)
-			spinodal= np.asarray(spinodal)
-
-			#Flip the plot w/ chi to be a function of temperature
-			temp_unit = jsondata['0']['temperature_unit']
-
-			if type == "Type 1":
-				chi = float(jsondata['0']['chi'])
-
-			
-				y2 = (chi/v0)/y2
-				spinodal = (chi/v0)/spinodal
-				crit_chi = (chi/v0)/crit_chi
-
-			elif type == "Type 2":
-				y2 = float(jsondata['0']['chib']) / ( y2 - float(jsondata['0']['chia']))
-				spinodal = float(jsondata['0']['chib']) / (spinodal - float(jsondata['0']['chia']))
-				crit_chi= float(jsondata['0']['chib']) / (crit_chi- float(jsondata['0']['chia']))
-
-			spinline = axis.plot(x,spinodal,'r',lw=2,label="Spinodal") 
-			binline = axis.plot(phi,y2,'b',lw=2,label="Binodal")
-			axis.legend()
-
-			"""Add d3 stuff"""
-			canvas = FigureCanvas(fig)
-			output = StringIO.StringIO()
-			canvas.print_png(output, bbox_inches='tight')
-			plugins.connect(fig, plugins.MousePosition())
-
-			id2 = "fig02"
-			json02 = json.dumps(mpld3.fig_to_dict(fig))
-
-			#Attempt to make dictionary of plots
-			plot_dict= dict()
-			plot_dict['id'] = "fig02"
-			plot_dict['json'] = json02
-			list_of_plots.append(plot_dict)
-
-			#Generate table
-			zipped = zip(x,spinodal,y2)
-
-			#Critical point
-			critvals = [crit_phi,crit_chi]
 
+			jsondata,critvals,list_of_plots,zipped = fPlot(polya,polyb,na,nb,v0,jsondata)
 			
 			return render_template("exampleplots.html",polya=polya,polyb=polyb,jsondata=jsondata,critphi=critvals,list_of_plots=list_of_plots,zipped=zipped)
 
diff --git a/flory.pyc b/flory.pyc
index 2841605..45b529a 100644
Binary files a/flory.pyc and b/flory.pyc differ
diff --git a/outfile1 b/outfile1
index 2b2cddc..41a48ad 100644
Binary files a/outfile1 and b/outfile1 differ
